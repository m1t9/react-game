{"version":3,"sources":["utils/CONSTANTS.ts","model/Board.tsx","components/BoardComp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CONSTANTS","FIELD_SIZE","X_FIGURE","O_FIGURE","TIE","NONE","Board","gameBoard","this","i","row","j","push","value","x","y","item","xCoord","yCoord","Y_FIGURE","localStorage","setItem","JSON","stringify","empty","val","figure","isEmpty","randX","Math","floor","random","randY","colCheck","rowCheck","start","end","winCells","diagonalCheck","iverseDiagonalCheck","currnetPlayer","board","savedBoard","getItem","gameWins","gameLose","gameTies","checkIncludes","arr","answ","forEach","parse","Cell","props","className","aviable","win","onClick","BoardComp","state","status","isNext","res","getBoard","checkWinner","lose","tie","changeFigureState","bind","newGame","reset","setState","toString","winner","setTimeout","computerStep","renderCell","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","fscrean","window","addEventListener","event","key","document","exitFullscreen","documentElement","requestFullscreen","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.34e37fa9.chunk.js","sourcesContent":["export const CONSTANTS: any = {\r\n  FIELD_SIZE: 3,\r\n  X_FIGURE: 'X',\r\n  O_FIGURE: 'O',\r\n  TIE: 't',\r\n  NONE: 'n',\r\n};\r\n","import { CONSTANTS } from '../utils/CONSTANTS';\r\n\r\ninterface winner {\r\n  figure: string,\r\n  start: number[],\r\n  end: number[],\r\n  winCells: any\r\n}\r\n\r\nexport class Board {\r\n  gameBoard: any[];\r\n\r\n  constructor() {\r\n    this.gameBoard = [];\r\n\r\n    for (let i = 0; i < 3; i += 1) {\r\n      let row = [];\r\n      for (let j = 0; j < 3; j += 1) {\r\n        row.push(\r\n          {\r\n            value: i * CONSTANTS.FIELD_SIZE + j,\r\n            x: i,\r\n            y: j,\r\n          }\r\n        )\r\n      }\r\n      this.gameBoard.push(row);\r\n    }\r\n  }\r\n\r\n  setItem(item: string, xCoord: number, yCoord: number): void {\r\n    if (this.gameBoard[xCoord][yCoord].value !== CONSTANTS.X_FIGURE\r\n      && this.gameBoard[xCoord][yCoord].value !== CONSTANTS.Y_FIGURE) {\r\n      this.gameBoard[xCoord][yCoord].value = item;\r\n    }\r\n    localStorage.setItem('board', JSON.stringify(this.gameBoard));\r\n  }\r\n\r\n  isEmpty():boolean {\r\n    let empty = false;\r\n\r\n    for (let i = 0; i < 3; i += 1) {\r\n      for (let j = 0; j < 3; j += 1) {\r\n        const val = this.gameBoard[i][j].value;\r\n        if (val !== CONSTANTS.X_FIGURE && val !== CONSTANTS.O_FIGURE) {\r\n          empty = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return empty;\r\n  }\r\n\r\n  computerStep(figure: string) {\r\n    let empty = this.isEmpty();\r\n\r\n    if (!empty) {\r\n      return;\r\n    }\r\n\r\n    let randX = Math.floor(Math.random() * 3);\r\n    let randY = Math.floor(Math.random() * 3);\r\n\r\n    while (this.gameBoard[randX][randY].value === CONSTANTS.X_FIGURE\r\n      || this.gameBoard[randX][randY].value === CONSTANTS.O_FIGURE) {\r\n      randX = Math.floor(Math.random() * 3);\r\n      randY = Math.floor(Math.random() * 3);\r\n    }\r\n\r\n    this.gameBoard[randX][randY].value = figure;\r\n    localStorage.setItem('board', JSON.stringify(this.gameBoard));\r\n  }\r\n\r\n  checkWinner(): winner {\r\n    for (let i = 0; i < CONSTANTS.FIELD_SIZE; i += 1) {\r\n      let colCheck: boolean = this.gameBoard[0][i].value === this.gameBoard[1][i].value\r\n        && this.gameBoard[1][i].value === this.gameBoard[2][i].value;\r\n      let rowCheck = this.gameBoard[i][0].value === this.gameBoard[i][1].value\r\n        && this.gameBoard[i][1].value === this.gameBoard[i][2].value;\r\n\r\n      if (colCheck) {\r\n        return {\r\n          figure: this.gameBoard[0][i].value,\r\n          start: [0, i],\r\n          end: [2, i],\r\n          winCells: [[0,i], [1, i], [2, i]],\r\n        };\r\n      }\r\n\r\n      if (rowCheck) {\r\n        return {\r\n          figure: this.gameBoard[i][0].value,\r\n          start: [i, 0],\r\n          end: [i, 2],\r\n          winCells: [[i, 0],[i, 1], [i, 2]],\r\n        };\r\n      }\r\n    }\r\n\r\n    let diagonalCheck = this.gameBoard[0][0].value === this.gameBoard[1][1].value\r\n      && this.gameBoard[1][1].value === this.gameBoard[2][2].value;\r\n    let iverseDiagonalCheck = this.gameBoard[0][2].value === this.gameBoard[1][1].value\r\n      && this.gameBoard[1][1].value === this.gameBoard[2][0].value;\r\n\r\n    if (diagonalCheck) {\r\n      return {\r\n        figure: this.gameBoard[0][0].value,\r\n        start: [0, 0],\r\n        end: [2, 2],\r\n        winCells: [[0, 0], [1, 1], [2, 2]],\r\n      };\r\n    }\r\n\r\n    if (iverseDiagonalCheck) {\r\n      return {\r\n        figure: this.gameBoard[0][2].value,\r\n        start: [0, 2],\r\n        end: [2, 0],\r\n        winCells: [[0, 2], [1, 1], [2, 0]],\r\n      };\r\n    }\r\n\r\n    if (!this.isEmpty()) {\r\n      return {\r\n        figure: CONSTANTS.TIE,\r\n        start: [],\r\n        end: [],\r\n        winCells: [],\r\n      };\r\n    } else {\r\n      return {\r\n        figure: CONSTANTS.NONE,\r\n        start: [],\r\n        end: [],\r\n        winCells: [],\r\n      };\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport { CONSTANTS } from '../utils/CONSTANTS';\r\nimport { Board } from '../model/Board';\r\n\r\nlet currnetPlayer: boolean = true;\r\n\r\ninterface CellProps {\r\n  value: string | number | null,\r\n  x: number,\r\n  y: number,\r\n  aviable: boolean,\r\n  win: string,\r\n  winCells: any,\r\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\r\n}\r\n\r\nlet board: Board = new Board();\r\nconst savedBoard: string = localStorage.getItem('board') || JSON.stringify(board.gameBoard);\r\nlet gameWins: number = +(localStorage.getItem('gameWins') || 0);\r\nlet gameLose: number = +(localStorage.getItem('gameLose') || 0);\r\nlet gameTies: number = +(localStorage.getItem('gameLose') || 0);\r\n\r\nboard.gameBoard = JSON.parse(savedBoard);\r\n\r\nfunction checkIncludes(arr: [], x: number, y: number) {\r\n  let answ: boolean = false;\r\n\r\n  arr.forEach((item: number[]) => {\r\n    if (item[0] === x && item[1] === y) {\r\n      answ = true;\r\n    }\r\n  });\r\n\r\n  return answ;\r\n}\r\n\r\nconst Cell: React.FunctionComponent<CellProps> = (props: any) => {\r\n  return (\r\n    <div\r\n      className={`${checkIncludes(props.winCells, props.x, props.y) ? 'cell win'\r\n        : (props.aviable ? (props.win === CONSTANTS.NONE ? 'cell aviable' : 'cell')\r\n          : 'cell insert')}`}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport class BoardComp extends React.Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      status: `Current player: ${CONSTANTS.X_FIGURE}`,\r\n      isNext: true,\r\n      res: this.getBoard(),\r\n      win: board.checkWinner().figure,\r\n      lose: 0,\r\n      tie: 0,\r\n    }\r\n\r\n    this.changeFigureState = this.changeFigureState.bind(this);\r\n    this.newGame = this.newGame.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n  }\r\n\r\n  newGame() {\r\n    board = new Board();\r\n    localStorage.setItem('board', JSON.stringify(board.gameBoard));\r\n    currnetPlayer = true;\r\n    this.setState({ res: this.getBoard() });\r\n  }\r\n\r\n  reset() {\r\n    gameWins = 0;\r\n    gameLose = 0;\r\n    gameTies = 0;\r\n    localStorage.setItem('gameWins', gameWins.toString());\r\n    localStorage.setItem('gameLose', gameLose.toString());\r\n    localStorage.setItem('gameTies', gameTies.toString());\r\n    this.newGame();\r\n  }\r\n\r\n  renderCell(value: number | string, x: number, y: number, aviable: boolean) {\r\n    return <Cell\r\n      value={value !== CONSTANTS.X_FIGURE && value !== CONSTANTS.O_FIGURE ? '' : value}\r\n      x={x}\r\n      y={y}\r\n      aviable={aviable}\r\n      win={board.checkWinner().figure}\r\n      winCells={board.checkWinner().winCells}\r\n      key={`${x}${y}`}\r\n      onClick={() => {\r\n        if (aviable && board.checkWinner().figure === CONSTANTS.NONE) {\r\n          board.setItem(currnetPlayer ? CONSTANTS.X_FIGURE : CONSTANTS.O_FIGURE, x, y);\r\n\r\n          let winner: string = board.checkWinner().figure;\r\n\r\n          if (winner === CONSTANTS.NONE) {\r\n            setTimeout(() => {\r\n              board.computerStep(CONSTANTS.O_FIGURE);\r\n              winner = board.checkWinner().figure;\r\n\r\n              if (winner === 'O') {\r\n                gameLose += 1;\r\n                localStorage.setItem('gameLose', gameLose.toString());\r\n              }\r\n            }, 10);\r\n          } else {\r\n            if (winner === CONSTANTS.X_FIGURE) {\r\n              gameWins += 1;\r\n              localStorage.setItem('gameWins', gameWins.toString());\r\n            } else if (winner === CONSTANTS.TIE) {\r\n              gameTies += 1;\r\n              localStorage.setItem('gameTies', gameTies.toString());\r\n            }\r\n          }\r\n        }\r\n      }}\r\n    />\r\n  }\r\n\r\n  getBoard(): any[] {\r\n    const res: any[] = [];\r\n\r\n    board.gameBoard.forEach((row) => {\r\n      row.forEach((item: any) => {\r\n        res.push(\r\n          this.renderCell(item.value, item.x, item.y, item.value !== CONSTANTS.X_FIGURE && item.value !== CONSTANTS.O_FIGURE)\r\n        )\r\n      })\r\n    });\r\n\r\n    return res;\r\n  }\r\n\r\n  changeFigureState() {\r\n    this.setState({ isNext: !this.state.isNext });\r\n    this.setState({ res: this.getBoard(), win: board.checkWinner().figure });\r\n\r\n    setTimeout(() => {\r\n      this.setState({ res: this.getBoard() });\r\n      this.setState({ isNext: !this.state.isNext });\r\n    }, 500);\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    let status: string;\r\n    const winner = board.checkWinner().figure;\r\n    if (winner !== CONSTANTS.NONE) {\r\n      if (winner === CONSTANTS.TIE) {\r\n        status = 'TIE';\r\n      } else {\r\n        status = `Winner: ${winner}`\r\n      }\r\n    } else {\r\n      status = this.state.isNext ? `Current player: ${CONSTANTS.X_FIGURE}` : `Current player: ${CONSTANTS.O_FIGURE}`;\r\n    }\r\n\r\n    return (\r\n\r\n      <div\r\n        className=\"gameBoard\"\r\n      >\r\n        <div className=\"status\">{status}</div>\r\n        <div className=\"resultsBlock\">\r\n          <div className=\"res\">{`Wins: ${gameWins}`}</div>\r\n          <div className=\"res\">{`Lose: ${gameLose}`}</div>\r\n          <div className=\"res\">{`Tie: ${gameTies}`}</div>\r\n        </div>\r\n        <div\r\n          onClick={this.changeFigureState}\r\n          key=\"board\"\r\n          className=\"board\"\r\n        >\r\n          {this.state.res}\r\n        </div>\r\n        <div className=\"buttonBox\">\r\n          <button\r\n            className=\"funcButton\"\r\n            onClick={this.newGame}\r\n          >\r\n            New game\r\n        </button>\r\n          <button\r\n            className=\"funcButton\"\r\n            onClick={this.reset}\r\n          >\r\n            Reset\r\n        </button>\r\n          <p className=\"info\">\r\n            Press 'F' to fullscreen\r\n        </p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport { BoardComp } from './components/BoardComp';\n\nconst App: React.FunctionComponent = () => {\n  return (\n    <BoardComp />\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nlet fscrean = false;\nwindow.addEventListener('keydown', (event) => {\n  if (event.key === 'f') {\n    if (!fscrean) {\n      document.documentElement.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n    fscrean = !fscrean;\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}